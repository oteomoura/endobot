import { storeMessage } from '../services/conversationService.js';
import { processIncomingMessage } from '../services/messageProcessingService.js';
import { sendWhatsAppMessage } from '../services/twilioService.js';

export async function handleIncomingWhatsAppMessage(req, res) {
  const { Body: userMessage, From: userPhoneNumber } = req.body;
  console.log(`Received message from ${userPhoneNumber}.`);

  let twilioAcknowledged = false;

  try {
    await storeMessage(userPhoneNumber, userMessage, 'user');

    const { finalMessageToSend, twilioAcknowledged: serviceAcknowledged } = await processIncomingMessage(userPhoneNumber, userMessage, res);
    twilioAcknowledged = serviceAcknowledged;

    if (finalMessageToSend !== null) {
      await storeMessage(userPhoneNumber, finalMessageToSend, 'bot');
      await sendWhatsAppMessage(userPhoneNumber, finalMessageToSend);
      console.log(`Sent final message generated by service to ${userPhoneNumber}.`);
    } else if (!twilioAcknowledged) {
      console.log(`No final message generated and Twilio not acknowledged by service for ${userPhoneNumber}.`);
    } else {
      console.log(`Service handled response or decided no message needed for ${userPhoneNumber}. Twilio acknowledged: ${twilioAcknowledged}`);
    }

  } catch (error) {
    console.error(`Error processing message for ${userPhoneNumber} in controller:`, error);
    if (!twilioAcknowledged && !res.headersSent) {
      res.send('<Response></Response>');
      twilioAcknowledged = true;
    }
    try {
      await sendWhatsAppMessage(userPhoneNumber, "Desculpe, ocorreu um erro interno. Tente novamente mais tarde.");
    } catch (sendError) {
      console.error(`Failed to send error message to ${userPhoneNumber}:`, sendError);
    }
  } finally {
    if (!twilioAcknowledged && !res.headersSent) {
      console.log(`Acknowledging Twilio with empty response (finally block) for ${userPhoneNumber}.`);
      res.send('<Response></Response>');
    }
  }
}

