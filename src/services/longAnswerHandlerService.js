import { sendWhatsAppMessage } from './twilioService.js';
import { regenerateAndSendShorterAnswer } from './answerProcessingService.js';

/**
 * Handles the case where the generated answer is too long.
 * Sends a notification, acknowledges Twilio, and triggers background reprocessing.
 * @param {object} res - Express response object.
 * @param {string} userPhoneNumber - The user's phone number.
 * @param {string} userMessage - The original user message.
 * @param {string | null} context - Relevant context.
 * @param {string | null} conversationHistory - Conversation history.
 * @param {string} initialAnswer - The original long answer generated by the LLM.
 * @returns {Promise<boolean>} A promise resolving to true if Twilio was acknowledged.
 */
export async function handleLongAnswer(res, userPhoneNumber, userMessage, context, conversationHistory, initialAnswer) {
  console.log(`[Handler] Long answer detected for ${userPhoneNumber}. Triggering reprocessing.`);
  let twilioAcknowledged = false;

  try {
    await sendWhatsAppMessage(userPhoneNumber, "Sua resposta está sendo processada e pode levar um pouco mais de tempo. Agradeço a paciência!");
  } catch (sendError) {
    console.error(`[Handler] Failed to send processing message to ${userPhoneNumber}:`, sendError);
  }

  if (!res.headersSent) {
    res.send('<Response></Response>');
    twilioAcknowledged = true;
  } else {
    console.warn("[Handler] Headers already sent before Twilio ack in handleLongAnswer.");
  }

  // Trigger reprocessing asynchronously
  regenerateAndSendShorterAnswer(userPhoneNumber, userMessage, context, conversationHistory, initialAnswer)
    .catch(reprocessingError => {
      console.error(`[Handler] Unhandled background reprocessing error for ${userPhoneNumber}:`, reprocessingError);
    });

  return twilioAcknowledged;
} 